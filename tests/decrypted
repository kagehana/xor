# sample generated by AI



import time
import random
import math
import json
import os
import threading

# Constants
PI = 3.141592653589793
E = 2.718281828459045
FIB_LIMIT = 50
SORT_SIZE = 1000
STRING_SIZE = 500
PRIME_LIMIT = 500
FILENAME = "test_output.txt"

# Fibonacci Sequence
def fibonacci(n):
    fib = [0, 1]
    for i in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fib

# Prime Number Generation
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def generate_primes(limit):
    return [n for n in range(2, limit) if is_prime(n)]

# Sorting Algorithms
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

# String Manipulation
def random_string(size):
    return ''.join(random.choices("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", k=size))

def reverse_string(s):
    return s[::-1]

# Simulation of Tasks
def simulate_tasks(n):
    tasks = ["Processing", "Loading", "Computing", "Analyzing"]
    for _ in range(n):
        print(random.choice(tasks) + "...")
        time.sleep(0.1)

# Multithreading Example
def print_numbers():
    for i in range(10):
        print(f"Thread 1: {i}")
        time.sleep(0.1)

def print_letters():
    for c in "abcdefghij":
        print(f"Thread 2: {c}")
        time.sleep(0.1)

# File Operations
def write_to_file(data):
    with open(FILENAME, "w") as file:
        json.dump(data, file)

def read_from_file():
    if os.path.exists(FILENAME):
        with open(FILENAME, "r") as file:
            return json.load(file)
    return {}

# Main Execution
if __name__ == "__main__":
    start_time = time.time()

    print("Generating Fibonacci sequence...")
    fib_seq = fibonacci(FIB_LIMIT)
    
    print("Generating prime numbers...")
    primes = generate_primes(PRIME_LIMIT)

    print("Sorting a random array...")
    arr = [random.randint(0, 10000) for _ in range(SORT_SIZE)]
    sorted_arr = bubble_sort(arr)

    print("Generating random string...")
    rand_str = random_string(STRING_SIZE)
    reversed_str = reverse_string(rand_str)

    print("Simulating tasks...")
    simulate_tasks(5)

    print("Starting multithreading...")
    t1 = threading.Thread(target=print_numbers)
    t2 = threading.Thread(target=print_letters)
    t1.start()
    t2.start()
    t1.join()
    t2.join()

    print("Writing results to file...")
    data = {
        "Fibonacci": fib_seq,
        "Primes": primes,
        "SortedNumbers": sorted_arr[:10],  # Save only first 10 for brevity
        "RandomString": rand_str[:10],  # Save only first 10 chars
        "ReversedString": reversed_str[:10]
    }
    write_to_file(data)

    print("Reading from file...")
    saved_data = read_from_file()

    print(f"Read Data Sample: {saved_data}")

    print(f"Program completed in {time.time() - start_time:.2f} seconds.")
